// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  USER
}

enum PET_STATUS {
  READY
  PENDING
  ADOPTED
}

enum ADOPTION_STATUS {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId             String?
  email              String  @unique
  hash               String
  hashedRefreshToken String?
  hashedPWResetToken String?

  role    ROLE     @default(USER)
  profile Profile?

  // one to many relationship with model Pet
  pet Pet[] // owner can have many pets

  // one to many relationship with model Adoption
  adoption Adoption[]
  Feedback Feedback[]

  @@map("users")
}

model Profile {
  id Int @id @default(autoincrement())

  fist_name String
  last_name String
  contact   String?
  address   String?
  imageUrl  String?

  // one to one relationship with model User
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId Int?  @unique

  @@map("profiles")
}

model Pet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  animalId    String?
  name        String
  breed       String
  condition   Int
  type        String
  age         Int?
  gender      String?
  traits      String?
  description String?
  imageUrl    String?
  imageId     String?
  healthNotes String?

  status PET_STATUS @default(READY)

  // one to one relationship with model User
  owner    User?      @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId  Int?
  // one to many relationship with model Adoption
  adoption Adoption[]

  @@map("pets")
}

model Adoption {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  schedule  DateTime

  adoptionId String?
  status     ADOPTION_STATUS @default(PENDING)

  adopter   User? @relation(fields: [adopterId], references: [id], onDelete: SetNull)
  adopterId Int?

  adoptee   Pet? @relation(fields: [adopteeId], references: [id], onDelete: SetNull)
  adopteeId Int?

  @@map("adoptions")
}

model Feedback {
  id        Int      @id @default(autoincrement())
  rate      Int
  message   String?
  pin       Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@map("feedbacks")
}

enum PATH {
  HOME
  ABOUT
  GALLERY
}

model Blog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String
  content String  @db.Text
  path    PATH    @default(HOME)
  photos  Photo[]

  @@map("blogs")
}

model Photo {
  id Int @id @default(autoincrement())

  imageUrl String
  imageId  String

  Blog   Blog? @relation(fields: [blogId], references: [id])
  blogId Int?

  @@map("photos")
}
