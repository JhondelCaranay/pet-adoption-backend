generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int        @id @default(autoincrement())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  userId             String?
  email              String     @unique
  hash               String
  hashedRefreshToken String?
  hashedPWResetToken String?
  role               ROLE       @default(USER)
  adoption           Adoption[]
  Feedback           Feedback[]
  pet                Pet[]
  profile            Profile?

  @@map("users")
}

model Profile {
  id        Int     @id @default(autoincrement())
  fist_name String
  last_name String
  contact   String?
  address   String?
  imageUrl  String?
  userId    Int?    @unique
  user      User?   @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Pet {
  id              Int        @id @default(autoincrement())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  animalId        String?
  name            String
  breed           String
  condition       Int?
  animal_history  String?
  medical_history String?
  type            String
  age             Int?
  gender          String?
  traits          String?
  description     String?
  imageUrl        String?
  imageId         String?
  healthNotes     String?
  
  status          PET_STATUS @default(READY)
  ownerId         Int?
  owner           User?      @relation(fields: [ownerId], references: [id])
  adoption        Adoption[]

  @@map("pets")
}

model Adoption {
  id         Int             @id @default(autoincrement())
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  schedule   DateTime
  adoptionId String?
  status     ADOPTION_STATUS @default(PENDING)
  adopterId  Int?
  adopteeId  Int?
  adoptee    Pet?            @relation(fields: [adopteeId], references: [id])
  adopter    User?           @relation(fields: [adopterId], references: [id])

  @@map("adoptions")
}

model Feedback {
  id        Int      @id @default(autoincrement())
  rate      Int
  message   String?
  pin       Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  @@map("feedbacks")
}

model Blog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String
  path      PATH     @default(HOME)
  photos    Photo[]

  @@map("blogs")
}

model Photo {
  id       Int    @id @default(autoincrement())
  imageUrl String
  imageId  String
  blogId   Int?
  Blog     Blog?  @relation(fields: [blogId], references: [id])

  @@map("photos")
}

enum ROLE {
  ADMIN
  USER
}

enum PET_STATUS {
  READY
  PENDING
  ADOPTED
}

enum ADOPTION_STATUS {
  PENDING
  APPROVED
  REJECTED
  APPROVED_INTERVIEW
}

enum PATH {
  HOME
  ABOUT
  GALLERY
}
